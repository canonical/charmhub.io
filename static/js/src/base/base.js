import { cookiePolicy } from "@canonical/cookie-policy";
import "./polyfills";
import "./navigation";
import "./tooltip-icon-modal";
import { TracingInstrumentation } from "@grafana/faro-web-tracing";
import { getWebInstrumentations, initializeFaro } from "@grafana/faro-web-sdk";
cookiePolicy();
import { faro } from "@grafana/faro-web-sdk";
const URL = "http://localhost:8081/collect";
console.log("Initializing Faro with URL:", URL);
initializeFaro({
  url: URL,

  app: {
    name: "charmhub-io-fe",
  },
  instrumentations: [
    // Mandatory, overwriting the instrumentations array would cause the default instrumentations to be omitted
    ...getWebInstrumentations(),

    // Mandatory, initialization of the tracing package
    new TracingInstrumentation(),
  ],
});
// Send custom errors with faro
// 1. Simple error generated at some point in your application
// 2. Namespaced error

// Supposed this error is generated somewhere in your app
const error = new Error("I am supposed to fail");
// ...
// And at some point you want to pipe it to Faro
faro.api.pushError(error);

// Different type
const anotherError = new Error("I am an error generated by network requests");
// ...
faro.api.pushError(anotherError, {
  type: "network",
});

// with additional contextual attributes
faro.api.pushError(error, {
  type: "network",
  context: {
    message: "React error boundary",
    componentStackTrace: "ErrorBoundary > MyComponent > ...",
  },
});

// log a test message
faro.api.pushLog(["This is a test log from Faro SDK"], { level: "info" });

// simulate an error
throw new Error("This is a test frontend error");
